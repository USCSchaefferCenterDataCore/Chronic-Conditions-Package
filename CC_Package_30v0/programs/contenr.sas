/*************************************************************************************************************************
***** MACRO: contenr

***** DESCRIPTION: This macro identifies length of continous enrollment (in months) for all beneficiaries included in an input dateset
										at any point in time. The macro generates a set of yearly files with one entry for each beneficiary and 24 columns, 
										two for each month, identifying number of months of continous enrolment from one particular month on, and up to a 
										particular month (including the reference month).
					
***** ARGUMENTS

- begyr: 		first year of data, to begin the enrollment count
- endyr: 		last year of data, to end the enrollment count
- shape:		Shape of the source data. The macro allows for two different type of source data, A (annual files) and P (period file).
						See below for description of input files.
- filein: 	Root name of the source file in the case of the annual files (A) or the full name for the period file (P)
						(E.g. if shape=A and filein=enr, the actual files are enrYYYY or enrQQYYYY or enrMMYYYY.
						If the file is permanently stored, the libname can be included - libname.enr).
- fileout:	Root name for the output file that will be generated by the macro - one file per year 
- id:				Beneficiary identification number.
- var:			In the case of the annual files (A), this is the name of the flag identifying the type of enrollment we want to count (e.g. ffs, PDP).
						In the case of the period files (P) it can be any string. 
						The string passed under var is used to name the set of variables counting months of continous enrollment.


**** Source file description - there are two possible formats for the input dataset, annual files with monthly entries (A), single period file
			with beneficiary entries per each unique period of continous enrollment (P). Note that multipe entries per beneficiary are allowed in P.
			Type A file variables: 
				- id, with the beneficiary unique identification number (any name)
				- "date", with the current month in SAS date format (set to the first day of the month)
				- var, an indicator (0/1) variable, with a flag for enrollment
			
			Type B file variables:
			- id, with the beneficiary unique identification number (any name)
			- "begdt", with the starting month of current enrollment period in SAS date format (set to the first day of the month)
			- "enddt", with the ending month of current enrollment period in SAS date format (set to the first day of the month)
			
**** Output file description: There is one file per year, with one entry for each beneficiary in the source file that was enrolled in the
					plan at least one month within the year.
					
**** NEED TO ADD THE DESCRIPTION OF THE FILE **** 

*************************************************************************************************************************/


%macro contenr(begyr,endyr,shape, filein, fileout, id, var);

****************************************************************;
	****** Shape long monthly enrollment file as a period file;
	%if &shape=A %then %do;
		%do yr=&begyr %to &endyr;
			%if &yr>&begyr %then %do;
				proc sql;
					create table _file3 as
					select &id, per, begdt as date format=mmddyy8.
					from _cont_enrl_per_&var
					union
					select &id, per, enddt as date format=mmddyy8.
					from _cont_enrl_per_&var
					union
					select &id, . as per,date format=mmddyy8.
					from &filein.&yr.(where=(&var.=1))
					order by &id, date;
				quit;
			%end;
			%if &yr=&begyr %then %do;
				proc sql;
					create table _file3 as
					select *
					from &filein.&yr.
					where &var=1
					order by &id., date;
				quit;
			%end; 
			data _file1;
				set _file3;
				by &id. date;
				format per 2.0 date ldt mmddyy8.;
				retain per2 ldt;
				if first.&id then do;
					if per=. then per2=1;
					ldt=date;
				end;
				if per^=. then per2=per;
				else if per=. & intck('MONTH',ldt,date,'D')>1 then per2+1;		
				ldt=date;
				per=per2;
			run;
			proc means data=_file1 noprint;
				by &id per;
				output out=_cont_enrl_per_&var(drop=_freq_ _type_) min(date)=begdt max(date)=enddt;
			run;
		%end;
	%end;
	****************************************************************************************************************;
	****** Compute continous enrollment as of a particular month;
	data 
		%do yr=&begyr %to &endyr;
					_enrl_cum_&var._&yr %end;;
		%if &shape=A %then set _cont_enrl_per_&var;;
		%if &shape=P %then set &filein;;
		
		array monfl(12) &var._pre_01 - &var._pre_12;
		cnt=0; 
		%do yr=&begyr %to &endyr;		
			posmon=0;
			%do mon=1 %to 12;
					if begdt<=mdy(&mon,1,&yr) & enddt>=mdy(&mon,1,&yr) then do;
						cnt+1;
						posmon=1;
					end;
					else cnt=0;
					year=&yr;
					monfl[&mon]=cnt;
			%end;
			if posmon>0 then output _enrl_cum_&var._&yr;				
		%end;
	run;
	
	****************************************************************************************************************;
	****** Compute continous enrollment after a particular month;

	data 
		%do yr=&begyr %to &endyr;
					_enrl_cum2_&var._&yr %end;;
		%if &shape=A %then set _cont_enrl_per_&var;;
		%if &shape=P %then set &filein;;
		
		array monpst(12) &var._post_01 - &var._post_12;
		cnt=0;
		%do yr=&endyr %to &begyr %by -1;		
			posmon=0;
			%do mon=12 %to 1 %by -1;
					if begdt<=mdy(&mon,1,&yr) & enddt>=mdy(&mon,1,&yr) then do;
						cnt+1;
						posmon=1;
					end;
					else cnt=0;
					year=&yr;
					monpst[&mon]=cnt;
			%end;
			if posmon>0 then output _enrl_cum2_&var._&yr;				
		%end;
	run;

	****************************************************************************************************************;
	****** Aggregate the monthly counts - up to this point, multiple separate enrollment periods within a year will 
	****** appear as different lines;
	
	%do yr=&begyr %to &endyr;		
		proc means data=_enrl_cum_&var._&yr noprint;
			by &id year;
			output out=fileout1(drop=_type_ _freq_) max(&var._pre_01-&var._pre_12)=;
		run;		
		proc means data=_enrl_cum2_&var._&yr noprint;
			by &id year;
			output out=fileout2(drop=_type_ _freq_) max(&var._post_01-&var._post_12)=;
		run;		

	****************************************************************************************************************;
	****** Combine pre and post counts and save in the same file;
	
		data &fileout.&yr;
			merge fileout1 fileout2;
			by &id year;
			label &var._post_01="Number of continous enrollment months from January &yr (includes current month)"
						&var._post_02="Number of continous enrollment months from February &yr (includes current month)"
						&var._post_03="Number of continous enrollment months from March &yr (includes current month)"
						&var._post_04="Number of continous enrollment months from April &yr (includes current month)"
						&var._post_05="Number of continous enrollment months from May &yr (includes current month)"
						&var._post_06="Number of continous enrollment months from June &yr (includes current month)"
						&var._post_07="Number of continous enrollment months from July &yr (includes current month)"
						&var._post_08="Number of continous enrollment months from August &yr (includes current month)"
						&var._post_09="Number of continous enrollment months from September &yr (includes current month)"
						&var._post_10="Number of continous enrollment months from October &yr (includes current month)"
						&var._post_11="Number of continous enrollment months from November &yr (includes current month)"
						&var._post_12="Number of continous enrollment months from December &yr (includes current month)";						
		run;
	%end;

	
%mend;
